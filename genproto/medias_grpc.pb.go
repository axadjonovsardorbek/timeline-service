// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: medias.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MediasService_Create_FullMethodName  = "/time_capsule.MediasService/Create"
	MediasService_GetById_FullMethodName = "/time_capsule.MediasService/GetById"
	MediasService_GetAll_FullMethodName  = "/time_capsule.MediasService/GetAll"
	MediasService_Update_FullMethodName  = "/time_capsule.MediasService/Update"
	MediasService_Delete_FullMethodName  = "/time_capsule.MediasService/Delete"
)

// MediasServiceClient is the client API for MediasService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediasServiceClient interface {
	Create(ctx context.Context, in *MediasCreateReq, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*MediasGetByIdRes, error)
	GetAll(ctx context.Context, in *MediasGetAllReq, opts ...grpc.CallOption) (*MediasGetAllRes, error)
	Update(ctx context.Context, in *MediasUpdateReq, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type mediasServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediasServiceClient(cc grpc.ClientConnInterface) MediasServiceClient {
	return &mediasServiceClient{cc}
}

func (c *mediasServiceClient) Create(ctx context.Context, in *MediasCreateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, MediasService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediasServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*MediasGetByIdRes, error) {
	out := new(MediasGetByIdRes)
	err := c.cc.Invoke(ctx, MediasService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediasServiceClient) GetAll(ctx context.Context, in *MediasGetAllReq, opts ...grpc.CallOption) (*MediasGetAllRes, error) {
	out := new(MediasGetAllRes)
	err := c.cc.Invoke(ctx, MediasService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediasServiceClient) Update(ctx context.Context, in *MediasUpdateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, MediasService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediasServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, MediasService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediasServiceServer is the server API for MediasService service.
// All implementations must embed UnimplementedMediasServiceServer
// for forward compatibility
type MediasServiceServer interface {
	Create(context.Context, *MediasCreateReq) (*Void, error)
	GetById(context.Context, *ById) (*MediasGetByIdRes, error)
	GetAll(context.Context, *MediasGetAllReq) (*MediasGetAllRes, error)
	Update(context.Context, *MediasUpdateReq) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedMediasServiceServer()
}

// UnimplementedMediasServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMediasServiceServer struct {
}

func (UnimplementedMediasServiceServer) Create(context.Context, *MediasCreateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMediasServiceServer) GetById(context.Context, *ById) (*MediasGetByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedMediasServiceServer) GetAll(context.Context, *MediasGetAllReq) (*MediasGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedMediasServiceServer) Update(context.Context, *MediasUpdateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMediasServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMediasServiceServer) mustEmbedUnimplementedMediasServiceServer() {}

// UnsafeMediasServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediasServiceServer will
// result in compilation errors.
type UnsafeMediasServiceServer interface {
	mustEmbedUnimplementedMediasServiceServer()
}

func RegisterMediasServiceServer(s grpc.ServiceRegistrar, srv MediasServiceServer) {
	s.RegisterService(&MediasService_ServiceDesc, srv)
}

func _MediasService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediasCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediasServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediasService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediasServiceServer).Create(ctx, req.(*MediasCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediasService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediasServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediasService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediasServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediasService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediasGetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediasServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediasService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediasServiceServer).GetAll(ctx, req.(*MediasGetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediasService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediasUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediasServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediasService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediasServiceServer).Update(ctx, req.(*MediasUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediasService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediasServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediasService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediasServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// MediasService_ServiceDesc is the grpc.ServiceDesc for MediasService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediasService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "time_capsule.MediasService",
	HandlerType: (*MediasServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MediasService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _MediasService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _MediasService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MediasService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MediasService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medias.proto",
}
