// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: custom_events.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CustomEventsService_Create_FullMethodName  = "/time_capsule.CustomEventsService/Create"
	CustomEventsService_GetById_FullMethodName = "/time_capsule.CustomEventsService/GetById"
	CustomEventsService_GetAll_FullMethodName  = "/time_capsule.CustomEventsService/GetAll"
	CustomEventsService_Update_FullMethodName  = "/time_capsule.CustomEventsService/Update"
	CustomEventsService_Delete_FullMethodName  = "/time_capsule.CustomEventsService/Delete"
)

// CustomEventsServiceClient is the client API for CustomEventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomEventsServiceClient interface {
	Create(ctx context.Context, in *CustomEventsCreateReq, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*CustomEventsGetByIdRes, error)
	GetAll(ctx context.Context, in *CustomEventsGetAllReq, opts ...grpc.CallOption) (*CustomEventsGetAllRes, error)
	Update(ctx context.Context, in *CustomEventsUpdateReq, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type customEventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomEventsServiceClient(cc grpc.ClientConnInterface) CustomEventsServiceClient {
	return &customEventsServiceClient{cc}
}

func (c *customEventsServiceClient) Create(ctx context.Context, in *CustomEventsCreateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, CustomEventsService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEventsServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*CustomEventsGetByIdRes, error) {
	out := new(CustomEventsGetByIdRes)
	err := c.cc.Invoke(ctx, CustomEventsService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEventsServiceClient) GetAll(ctx context.Context, in *CustomEventsGetAllReq, opts ...grpc.CallOption) (*CustomEventsGetAllRes, error) {
	out := new(CustomEventsGetAllRes)
	err := c.cc.Invoke(ctx, CustomEventsService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEventsServiceClient) Update(ctx context.Context, in *CustomEventsUpdateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, CustomEventsService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEventsServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, CustomEventsService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomEventsServiceServer is the server API for CustomEventsService service.
// All implementations must embed UnimplementedCustomEventsServiceServer
// for forward compatibility
type CustomEventsServiceServer interface {
	Create(context.Context, *CustomEventsCreateReq) (*Void, error)
	GetById(context.Context, *ById) (*CustomEventsGetByIdRes, error)
	GetAll(context.Context, *CustomEventsGetAllReq) (*CustomEventsGetAllRes, error)
	Update(context.Context, *CustomEventsUpdateReq) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedCustomEventsServiceServer()
}

// UnimplementedCustomEventsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomEventsServiceServer struct {
}

func (UnimplementedCustomEventsServiceServer) Create(context.Context, *CustomEventsCreateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCustomEventsServiceServer) GetById(context.Context, *ById) (*CustomEventsGetByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedCustomEventsServiceServer) GetAll(context.Context, *CustomEventsGetAllReq) (*CustomEventsGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedCustomEventsServiceServer) Update(context.Context, *CustomEventsUpdateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCustomEventsServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCustomEventsServiceServer) mustEmbedUnimplementedCustomEventsServiceServer() {}

// UnsafeCustomEventsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomEventsServiceServer will
// result in compilation errors.
type UnsafeCustomEventsServiceServer interface {
	mustEmbedUnimplementedCustomEventsServiceServer()
}

func RegisterCustomEventsServiceServer(s grpc.ServiceRegistrar, srv CustomEventsServiceServer) {
	s.RegisterService(&CustomEventsService_ServiceDesc, srv)
}

func _CustomEventsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomEventsCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEventsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEventsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEventsServiceServer).Create(ctx, req.(*CustomEventsCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEventsService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEventsServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEventsService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEventsServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEventsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomEventsGetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEventsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEventsService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEventsServiceServer).GetAll(ctx, req.(*CustomEventsGetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEventsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomEventsUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEventsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEventsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEventsServiceServer).Update(ctx, req.(*CustomEventsUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEventsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEventsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEventsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEventsServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomEventsService_ServiceDesc is the grpc.ServiceDesc for CustomEventsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomEventsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "time_capsule.CustomEventsService",
	HandlerType: (*CustomEventsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CustomEventsService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _CustomEventsService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _CustomEventsService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CustomEventsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CustomEventsService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "custom_events.proto",
}
