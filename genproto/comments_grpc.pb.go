// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: comments.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommentsService_Create_FullMethodName  = "/time_capsule.CommentsService/Create"
	CommentsService_GetById_FullMethodName = "/time_capsule.CommentsService/GetById"
	CommentsService_GetAll_FullMethodName  = "/time_capsule.CommentsService/GetAll"
	CommentsService_Update_FullMethodName  = "/time_capsule.CommentsService/Update"
	CommentsService_Delete_FullMethodName  = "/time_capsule.CommentsService/Delete"
)

// CommentsServiceClient is the client API for CommentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentsServiceClient interface {
	Create(ctx context.Context, in *CommentsCreateReq, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*CommentsGetByIdRes, error)
	GetAll(ctx context.Context, in *CommentsGetAllReq, opts ...grpc.CallOption) (*CommentsGetAllRes, error)
	Update(ctx context.Context, in *CommentsUpdateReq, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type commentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentsServiceClient(cc grpc.ClientConnInterface) CommentsServiceClient {
	return &commentsServiceClient{cc}
}

func (c *commentsServiceClient) Create(ctx context.Context, in *CommentsCreateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, CommentsService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*CommentsGetByIdRes, error) {
	out := new(CommentsGetByIdRes)
	err := c.cc.Invoke(ctx, CommentsService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceClient) GetAll(ctx context.Context, in *CommentsGetAllReq, opts ...grpc.CallOption) (*CommentsGetAllRes, error) {
	out := new(CommentsGetAllRes)
	err := c.cc.Invoke(ctx, CommentsService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceClient) Update(ctx context.Context, in *CommentsUpdateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, CommentsService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, CommentsService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentsServiceServer is the server API for CommentsService service.
// All implementations must embed UnimplementedCommentsServiceServer
// for forward compatibility
type CommentsServiceServer interface {
	Create(context.Context, *CommentsCreateReq) (*Void, error)
	GetById(context.Context, *ById) (*CommentsGetByIdRes, error)
	GetAll(context.Context, *CommentsGetAllReq) (*CommentsGetAllRes, error)
	Update(context.Context, *CommentsUpdateReq) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedCommentsServiceServer()
}

// UnimplementedCommentsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentsServiceServer struct {
}

func (UnimplementedCommentsServiceServer) Create(context.Context, *CommentsCreateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCommentsServiceServer) GetById(context.Context, *ById) (*CommentsGetByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedCommentsServiceServer) GetAll(context.Context, *CommentsGetAllReq) (*CommentsGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedCommentsServiceServer) Update(context.Context, *CommentsUpdateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCommentsServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCommentsServiceServer) mustEmbedUnimplementedCommentsServiceServer() {}

// UnsafeCommentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentsServiceServer will
// result in compilation errors.
type UnsafeCommentsServiceServer interface {
	mustEmbedUnimplementedCommentsServiceServer()
}

func RegisterCommentsServiceServer(s grpc.ServiceRegistrar, srv CommentsServiceServer) {
	s.RegisterService(&CommentsService_ServiceDesc, srv)
}

func _CommentsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentsCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).Create(ctx, req.(*CommentsCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentsGetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).GetAll(ctx, req.(*CommentsGetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentsUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).Update(ctx, req.(*CommentsUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentsService_ServiceDesc is the grpc.ServiceDesc for CommentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "time_capsule.CommentsService",
	HandlerType: (*CommentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CommentsService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _CommentsService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _CommentsService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CommentsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CommentsService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comments.proto",
}
