// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: historical_events.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HistoricalEventsService_Create_FullMethodName  = "/time_capsule.HistoricalEventsService/Create"
	HistoricalEventsService_GetById_FullMethodName = "/time_capsule.HistoricalEventsService/GetById"
	HistoricalEventsService_GetAll_FullMethodName  = "/time_capsule.HistoricalEventsService/GetAll"
	HistoricalEventsService_Update_FullMethodName  = "/time_capsule.HistoricalEventsService/Update"
	HistoricalEventsService_Delete_FullMethodName  = "/time_capsule.HistoricalEventsService/Delete"
	HistoricalEventsService_Context_FullMethodName = "/time_capsule.HistoricalEventsService/Context"
)

// HistoricalEventsServiceClient is the client API for HistoricalEventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoricalEventsServiceClient interface {
	Create(ctx context.Context, in *HistoricalEventsRes, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*HistoricalEventsGetByIdRes, error)
	GetAll(ctx context.Context, in *HistoricalEventsGetAllReq, opts ...grpc.CallOption) (*HistoricalEventsGetAllRes, error)
	Update(ctx context.Context, in *HistoricalEventsUpdateReq, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	Context(ctx context.Context, in *ContextReq, opts ...grpc.CallOption) (*ContextRes, error)
}

type historicalEventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoricalEventsServiceClient(cc grpc.ClientConnInterface) HistoricalEventsServiceClient {
	return &historicalEventsServiceClient{cc}
}

func (c *historicalEventsServiceClient) Create(ctx context.Context, in *HistoricalEventsRes, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, HistoricalEventsService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historicalEventsServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*HistoricalEventsGetByIdRes, error) {
	out := new(HistoricalEventsGetByIdRes)
	err := c.cc.Invoke(ctx, HistoricalEventsService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historicalEventsServiceClient) GetAll(ctx context.Context, in *HistoricalEventsGetAllReq, opts ...grpc.CallOption) (*HistoricalEventsGetAllRes, error) {
	out := new(HistoricalEventsGetAllRes)
	err := c.cc.Invoke(ctx, HistoricalEventsService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historicalEventsServiceClient) Update(ctx context.Context, in *HistoricalEventsUpdateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, HistoricalEventsService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historicalEventsServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, HistoricalEventsService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historicalEventsServiceClient) Context(ctx context.Context, in *ContextReq, opts ...grpc.CallOption) (*ContextRes, error) {
	out := new(ContextRes)
	err := c.cc.Invoke(ctx, HistoricalEventsService_Context_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoricalEventsServiceServer is the server API for HistoricalEventsService service.
// All implementations must embed UnimplementedHistoricalEventsServiceServer
// for forward compatibility
type HistoricalEventsServiceServer interface {
	Create(context.Context, *HistoricalEventsRes) (*Void, error)
	GetById(context.Context, *ById) (*HistoricalEventsGetByIdRes, error)
	GetAll(context.Context, *HistoricalEventsGetAllReq) (*HistoricalEventsGetAllRes, error)
	Update(context.Context, *HistoricalEventsUpdateReq) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	Context(context.Context, *ContextReq) (*ContextRes, error)
	mustEmbedUnimplementedHistoricalEventsServiceServer()
}

// UnimplementedHistoricalEventsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHistoricalEventsServiceServer struct {
}

func (UnimplementedHistoricalEventsServiceServer) Create(context.Context, *HistoricalEventsRes) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedHistoricalEventsServiceServer) GetById(context.Context, *ById) (*HistoricalEventsGetByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedHistoricalEventsServiceServer) GetAll(context.Context, *HistoricalEventsGetAllReq) (*HistoricalEventsGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedHistoricalEventsServiceServer) Update(context.Context, *HistoricalEventsUpdateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedHistoricalEventsServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedHistoricalEventsServiceServer) Context(context.Context, *ContextReq) (*ContextRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Context not implemented")
}
func (UnimplementedHistoricalEventsServiceServer) mustEmbedUnimplementedHistoricalEventsServiceServer() {
}

// UnsafeHistoricalEventsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoricalEventsServiceServer will
// result in compilation errors.
type UnsafeHistoricalEventsServiceServer interface {
	mustEmbedUnimplementedHistoricalEventsServiceServer()
}

func RegisterHistoricalEventsServiceServer(s grpc.ServiceRegistrar, srv HistoricalEventsServiceServer) {
	s.RegisterService(&HistoricalEventsService_ServiceDesc, srv)
}

func _HistoricalEventsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalEventsRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoricalEventsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoricalEventsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoricalEventsServiceServer).Create(ctx, req.(*HistoricalEventsRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoricalEventsService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoricalEventsServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoricalEventsService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoricalEventsServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoricalEventsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalEventsGetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoricalEventsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoricalEventsService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoricalEventsServiceServer).GetAll(ctx, req.(*HistoricalEventsGetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoricalEventsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalEventsUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoricalEventsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoricalEventsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoricalEventsServiceServer).Update(ctx, req.(*HistoricalEventsUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoricalEventsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoricalEventsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoricalEventsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoricalEventsServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoricalEventsService_Context_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoricalEventsServiceServer).Context(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoricalEventsService_Context_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoricalEventsServiceServer).Context(ctx, req.(*ContextReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HistoricalEventsService_ServiceDesc is the grpc.ServiceDesc for HistoricalEventsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoricalEventsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "time_capsule.HistoricalEventsService",
	HandlerType: (*HistoricalEventsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _HistoricalEventsService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _HistoricalEventsService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _HistoricalEventsService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _HistoricalEventsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _HistoricalEventsService_Delete_Handler,
		},
		{
			MethodName: "Context",
			Handler:    _HistoricalEventsService_Context_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "historical_events.proto",
}
