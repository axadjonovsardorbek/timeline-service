// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: personal_events.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PersonalEventsService_Create_FullMethodName  = "/time_capsule.PersonalEventsService/Create"
	PersonalEventsService_GetById_FullMethodName = "/time_capsule.PersonalEventsService/GetById"
	PersonalEventsService_GetAll_FullMethodName  = "/time_capsule.PersonalEventsService/GetAll"
	PersonalEventsService_Update_FullMethodName  = "/time_capsule.PersonalEventsService/Update"
	PersonalEventsService_Delete_FullMethodName  = "/time_capsule.PersonalEventsService/Delete"
)

// PersonalEventsServiceClient is the client API for PersonalEventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonalEventsServiceClient interface {
	Create(ctx context.Context, in *PersonalEventsRes, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*PersonalEventsGetByIdRes, error)
	GetAll(ctx context.Context, in *PersonalEventsGetAllReq, opts ...grpc.CallOption) (*PersonalEventsGetAllRes, error)
	Update(ctx context.Context, in *PersonalEventsUpdateReq, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type personalEventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonalEventsServiceClient(cc grpc.ClientConnInterface) PersonalEventsServiceClient {
	return &personalEventsServiceClient{cc}
}

func (c *personalEventsServiceClient) Create(ctx context.Context, in *PersonalEventsRes, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, PersonalEventsService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalEventsServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*PersonalEventsGetByIdRes, error) {
	out := new(PersonalEventsGetByIdRes)
	err := c.cc.Invoke(ctx, PersonalEventsService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalEventsServiceClient) GetAll(ctx context.Context, in *PersonalEventsGetAllReq, opts ...grpc.CallOption) (*PersonalEventsGetAllRes, error) {
	out := new(PersonalEventsGetAllRes)
	err := c.cc.Invoke(ctx, PersonalEventsService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalEventsServiceClient) Update(ctx context.Context, in *PersonalEventsUpdateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, PersonalEventsService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalEventsServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, PersonalEventsService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonalEventsServiceServer is the server API for PersonalEventsService service.
// All implementations must embed UnimplementedPersonalEventsServiceServer
// for forward compatibility
type PersonalEventsServiceServer interface {
	Create(context.Context, *PersonalEventsRes) (*Void, error)
	GetById(context.Context, *ById) (*PersonalEventsGetByIdRes, error)
	GetAll(context.Context, *PersonalEventsGetAllReq) (*PersonalEventsGetAllRes, error)
	Update(context.Context, *PersonalEventsUpdateReq) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedPersonalEventsServiceServer()
}

// UnimplementedPersonalEventsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersonalEventsServiceServer struct {
}

func (UnimplementedPersonalEventsServiceServer) Create(context.Context, *PersonalEventsRes) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPersonalEventsServiceServer) GetById(context.Context, *ById) (*PersonalEventsGetByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedPersonalEventsServiceServer) GetAll(context.Context, *PersonalEventsGetAllReq) (*PersonalEventsGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedPersonalEventsServiceServer) Update(context.Context, *PersonalEventsUpdateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPersonalEventsServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPersonalEventsServiceServer) mustEmbedUnimplementedPersonalEventsServiceServer() {}

// UnsafePersonalEventsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonalEventsServiceServer will
// result in compilation errors.
type UnsafePersonalEventsServiceServer interface {
	mustEmbedUnimplementedPersonalEventsServiceServer()
}

func RegisterPersonalEventsServiceServer(s grpc.ServiceRegistrar, srv PersonalEventsServiceServer) {
	s.RegisterService(&PersonalEventsService_ServiceDesc, srv)
}

func _PersonalEventsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalEventsRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalEventsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalEventsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalEventsServiceServer).Create(ctx, req.(*PersonalEventsRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalEventsService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalEventsServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalEventsService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalEventsServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalEventsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalEventsGetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalEventsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalEventsService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalEventsServiceServer).GetAll(ctx, req.(*PersonalEventsGetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalEventsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalEventsUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalEventsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalEventsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalEventsServiceServer).Update(ctx, req.(*PersonalEventsUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalEventsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalEventsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalEventsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalEventsServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonalEventsService_ServiceDesc is the grpc.ServiceDesc for PersonalEventsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonalEventsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "time_capsule.PersonalEventsService",
	HandlerType: (*PersonalEventsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PersonalEventsService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _PersonalEventsService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _PersonalEventsService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PersonalEventsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PersonalEventsService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "personal_events.proto",
}
